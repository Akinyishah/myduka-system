#FLASK-its a framework used to build an application
#what is a framework-software used to build web applications e.g FLASK,DJANGO,FASTAPI-python frameworks 
    .NET-C#
    Spring-Java
    Ruby on Rails-Ruby
    we use Frameworks on top of languages 
    Comes with ready made tools for you to build applications 

#flask framework-is an application programming interface that allows us to build web applications 
using python. Flask is often classified as a micro-framework,because it does not require  particular tools and library to function.  


#what is a library and examples of library 
    this is a pre-written code that helps solves specific problems or adds certain features 
    #concept of building a house:-
    OPTION1-this is the library
    -identify land,identify requirements,design the house,go the hardware, 
    Library is a like a store that has hammer,nails,wood,ironsheet
    with library the programmer is in control of usage.


    OPTION2-This is the framework
    -Go to an engineer and architect and get a predesigned(blueprint) house with all the tools and 
    materials alreday identified and provided
    -with Framework its structured hence the programmer
    has to follow a certain conventions and practices to achieve desired goal
#difference between a framework and a library
    -with Framework its structured hence the programmer
    has to follow a certain conventions and practices to achieve desired goal WHILE LIBRARY
    -Library is a like a store that has hammer,nails,wood,ironsheet
    with library the programmer is in control of usage.


#ROUTING- Mechanism used to map URLs to view functions -system for resource navigation.
-connect function to a URL-
#what is a route- Aroute is a  path in the URL 

Definition-part of the URL that determines what functions to
            execute when a specific URL is accessed or visited 

www.myduka.com/co.ke -this is the URL
www.myduka/products.com-this is now a route where resources being provided here are only about products 
techcamp.co.ke- this is a URL
techcamp.co.ke/about us- this is a rule- this is a path           

#HOW DO WE IMPLEMENT ROUTING IN FLASK?
@app.route()- this is a decorator:function that allows you to modify the behaviour of other functions 
has a prefix which is '@'

BELOW ARE EXAMPLES 

@app.route('/products)
def products():
    products=fetch_data('productd')
    return products


@app.route('/login)
def login():    

#In summary, in Flask, a decorator like @app.route() is a Python mechanism used to map URLs to view functions, 
#enabling the framework to route incoming HTTP requests to the appropriate handler functions.

#PARARAMETERS THAT CAN BE PASSED IN A ROUTE FUNCTION-decorator
1.Rule- specific path yopu want to access  e.g /, /products,/sales,/users- This defines the path a user accesses
 the browser(index.html is / only at the begining)

 -We have been returning strings step forward 
 return a simple HTML page (homepage)
 SERVE HTML PAGES FOLLOW THE BELOW RULES:
                  MY DUKA PROJECT structured
myduka-folder containing the entire project                
    -main.py
    -database.py
 create a folder that holds all the HTML stuff 
    1.templates(all html files will be inside here() e.g  -follows casing & syntax
    index.html.
    sales.html.
    products.html )   
    2.static-(Files that do not change much)
    -all static files which are the 
    styling e.g myduka.css.style.css,home.css
    images
    videos
    java script files
    favicons-small logos that appear at the top there.
    fonts, PDF files
#

#RENDERING- Process of serving HTML with Flask
Goal is to display HTML page file using flask

#IMPLEMENTATION-
we render HTML pages using functions provided by flask
its called render_template()-this function:
1.has to be imported from flask in order to be used next to import from flask put a comma then render_template
2.it takes some parameters - 

            1.HTMLPAGES- (full name of my HTML page)
e.g render_template('index.html')
            2.VARIABLE HOLDING data

 #IMPLEMENTING PASSING DATA FROM FLASK TO HTML
    - To implement the above we have to use tools provided by flask        
    #tool is called jinja pass data inform of variables from flask to HTML 
     
    #WHAT IS JINJA?-Its a templating engine intergrated with FLASK to render(return) dynamic HTML pages-
    #{dynamic means it can take some data and the data changes depending on user input}
    TEMPLATING ENGINE-Tool in web development used to generate dynamic HTML

    JINJA IS JUST A SYNTAX {{}} - written in form of 2 curly brackets to its NOT IMPORTED 
    *to pass a variable using jinja write the correct variable name inside the 2 curly brackets e.g
    name="Akinyi Shah"

    return render_template("index.html",name=name)

    #inside my HTML templates pass the jinja syntax
    <p> Hello, {{name}} </p>

    #WHAT CAN JINJA DO- IT helps/perform python logic inside HTML templates

    #HOW DOES JINJA WORK- 1.alreday have predefined templates
                           2.passing jinja sysntax  {{}} inside the templates
                           3.your flask application provided data to be passed inside jinja
                           4. data is rendered   

    #WHAT CAN WE PASS INSIDE JINJA
        1.SIMPLE VARIABLES-once you've passed this variable as parameter inside render_template-
        pass the variable inside jinja 
        syntax{{variable}} pass the same name of the variable e.g data is placed on the Index.html 

        2.CONTROL STRUCTURES-
        a. Sequence- this means my program is being exceuted sequentially from top to bottom,
        b. Selection- this are the conditional statements- IF/ELIF/ELSE,SWITCH/BREAK
        c. Iteration-looping-executing instructions/code until a specified condition is met e.g for loops, while,do-while

    # IMEPLEMENTING CONTROL STRUCTURES WITH JINJA 
    JINJA syntax when implementing control structures:
        {% if  %}
        N/B- You have to end the program 
        you have to define a starting point and an ending point check index.html

    # STRONG FOCUS ON IF STATEMENTS AND LOOPS
        # CONDITIONAL STATEMENTS- IF                      


TASK.
Create 2 files products.html and sales.html 
render them using flask render_template

